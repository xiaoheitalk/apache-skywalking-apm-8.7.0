// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event/Event.proto

package org.apache.skywalking.apm.network.event.v3;

/**
 * Protobuf type {@code skywalking.v3.Event}
 */
public final class Event extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:skywalking.v3.Event)
    EventOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Event.newBuilder() to construct.
  private Event(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Event() {
    uuid_ = "";
    name_ = "";
    type_ = 0;
    message_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Event();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Event(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            uuid_ = s;
            break;
          }
          case 18: {
            org.apache.skywalking.apm.network.event.v3.Source.Builder subBuilder = null;
            if (source_ != null) {
              subBuilder = source_.toBuilder();
            }
            source_ = input.readMessage(org.apache.skywalking.apm.network.event.v3.Source.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(source_);
              source_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 32: {
            int rawValue = input.readEnum();

            type_ = rawValue;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            message_ = s;
            break;
          }
          case 50: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              parameters_ = com.google.protobuf.MapField.newMapField(
                  ParametersDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000001;
            }
            com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
            parameters__ = input.readMessage(
                ParametersDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            parameters_.getMutableMap().put(
                parameters__.getKey(), parameters__.getValue());
            break;
          }
          case 56: {

            startTime_ = input.readInt64();
            break;
          }
          case 64: {

            endTime_ = input.readInt64();
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.apache.skywalking.apm.network.event.v3.EventOuterClass.internal_static_skywalking_v3_Event_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 6:
        return internalGetParameters();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.apache.skywalking.apm.network.event.v3.EventOuterClass.internal_static_skywalking_v3_Event_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.apache.skywalking.apm.network.event.v3.Event.class, org.apache.skywalking.apm.network.event.v3.Event.Builder.class);
  }

  public static final int UUID_FIELD_NUMBER = 1;
  private volatile java.lang.Object uuid_;
  /**
   * <pre>
   * Unique ID of the event. Because an event may span a long period of time, the UUID is necessary to associate the
   * start time with the end time of the same event.
   * </pre>
   *
   * <code>string uuid = 1;</code>
   * @return The uuid.
   */
  @java.lang.Override
  public java.lang.String getUuid() {
    java.lang.Object ref = uuid_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      uuid_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Unique ID of the event. Because an event may span a long period of time, the UUID is necessary to associate the
   * start time with the end time of the same event.
   * </pre>
   *
   * <code>string uuid = 1;</code>
   * @return The bytes for uuid.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getUuidBytes() {
    java.lang.Object ref = uuid_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      uuid_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SOURCE_FIELD_NUMBER = 2;
  private org.apache.skywalking.apm.network.event.v3.Source source_;
  /**
   * <pre>
   * The source object that the event occurs on.
   * </pre>
   *
   * <code>.skywalking.v3.Source source = 2;</code>
   * @return Whether the source field is set.
   */
  @java.lang.Override
  public boolean hasSource() {
    return source_ != null;
  }
  /**
   * <pre>
   * The source object that the event occurs on.
   * </pre>
   *
   * <code>.skywalking.v3.Source source = 2;</code>
   * @return The source.
   */
  @java.lang.Override
  public org.apache.skywalking.apm.network.event.v3.Source getSource() {
    return source_ == null ? org.apache.skywalking.apm.network.event.v3.Source.getDefaultInstance() : source_;
  }
  /**
   * <pre>
   * The source object that the event occurs on.
   * </pre>
   *
   * <code>.skywalking.v3.Source source = 2;</code>
   */
  @java.lang.Override
  public org.apache.skywalking.apm.network.event.v3.SourceOrBuilder getSourceOrBuilder() {
    return getSource();
  }

  public static final int NAME_FIELD_NUMBER = 3;
  private volatile java.lang.Object name_;
  /**
   * <pre>
   * The name of the event. For example, `Reboot`, `Upgrade` etc.
   * </pre>
   *
   * <code>string name = 3;</code>
   * @return The name.
   */
  @java.lang.Override
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The name of the event. For example, `Reboot`, `Upgrade` etc.
   * </pre>
   *
   * <code>string name = 3;</code>
   * @return The bytes for name.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int TYPE_FIELD_NUMBER = 4;
  private int type_;
  /**
   * <pre>
   * The type of the event. This field is friendly for UI visualization, where events of type `Normal` are considered as normal operations,
   * while `Error` is considered as unexpected operations, such as `Crash` events, therefore we can mark them with different colors to be easier identified.
   * </pre>
   *
   * <code>.skywalking.v3.Type type = 4;</code>
   * @return The enum numeric value on the wire for type.
   */
  @java.lang.Override public int getTypeValue() {
    return type_;
  }
  /**
   * <pre>
   * The type of the event. This field is friendly for UI visualization, where events of type `Normal` are considered as normal operations,
   * while `Error` is considered as unexpected operations, such as `Crash` events, therefore we can mark them with different colors to be easier identified.
   * </pre>
   *
   * <code>.skywalking.v3.Type type = 4;</code>
   * @return The type.
   */
  @java.lang.Override public org.apache.skywalking.apm.network.event.v3.Type getType() {
    @SuppressWarnings("deprecation")
    org.apache.skywalking.apm.network.event.v3.Type result = org.apache.skywalking.apm.network.event.v3.Type.valueOf(type_);
    return result == null ? org.apache.skywalking.apm.network.event.v3.Type.UNRECOGNIZED : result;
  }

  public static final int MESSAGE_FIELD_NUMBER = 5;
  private volatile java.lang.Object message_;
  /**
   * <pre>
   * The detail of the event that describes why this event happened. This should be a one-line message that briefly describes why the event is reported.
   * Examples of an `Upgrade` event may be something like `Upgrade from ${from_version} to ${to_version}`.
   * It's NOT encouraged to include the detailed logs of this event, such as the exception stack trace.
   * </pre>
   *
   * <code>string message = 5;</code>
   * @return The message.
   */
  @java.lang.Override
  public java.lang.String getMessage() {
    java.lang.Object ref = message_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      message_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * The detail of the event that describes why this event happened. This should be a one-line message that briefly describes why the event is reported.
   * Examples of an `Upgrade` event may be something like `Upgrade from ${from_version} to ${to_version}`.
   * It's NOT encouraged to include the detailed logs of this event, such as the exception stack trace.
   * </pre>
   *
   * <code>string message = 5;</code>
   * @return The bytes for message.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getMessageBytes() {
    java.lang.Object ref = message_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      message_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PARAMETERS_FIELD_NUMBER = 6;
  private static final class ParametersDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, java.lang.String>newDefaultInstance(
                org.apache.skywalking.apm.network.event.v3.EventOuterClass.internal_static_skywalking_v3_Event_ParametersEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapField<
      java.lang.String, java.lang.String> parameters_;
  private com.google.protobuf.MapField<java.lang.String, java.lang.String>
  internalGetParameters() {
    if (parameters_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ParametersDefaultEntryHolder.defaultEntry);
    }
    return parameters_;
  }

  public int getParametersCount() {
    return internalGetParameters().getMap().size();
  }
  /**
   * <pre>
   * The parameters in the `message` field.
   * </pre>
   *
   * <code>map&lt;string, string&gt; parameters = 6;</code>
   */

  @java.lang.Override
  public boolean containsParameters(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetParameters().getMap().containsKey(key);
  }
  /**
   * Use {@link #getParametersMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getParameters() {
    return getParametersMap();
  }
  /**
   * <pre>
   * The parameters in the `message` field.
   * </pre>
   *
   * <code>map&lt;string, string&gt; parameters = 6;</code>
   */
  @java.lang.Override

  public java.util.Map<java.lang.String, java.lang.String> getParametersMap() {
    return internalGetParameters().getMap();
  }
  /**
   * <pre>
   * The parameters in the `message` field.
   * </pre>
   *
   * <code>map&lt;string, string&gt; parameters = 6;</code>
   */
  @java.lang.Override

  public java.lang.String getParametersOrDefault(
      java.lang.String key,
      java.lang.String defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetParameters().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * The parameters in the `message` field.
   * </pre>
   *
   * <code>map&lt;string, string&gt; parameters = 6;</code>
   */
  @java.lang.Override

  public java.lang.String getParametersOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetParameters().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int STARTTIME_FIELD_NUMBER = 7;
  private long startTime_;
  /**
   * <pre>
   * The start time (in milliseconds) of the event, measured between the current time and midnight, January 1, 1970 UTC.
   * This field is mandatory when an event occurs.
   * </pre>
   *
   * <code>int64 startTime = 7;</code>
   * @return The startTime.
   */
  @java.lang.Override
  public long getStartTime() {
    return startTime_;
  }

  public static final int ENDTIME_FIELD_NUMBER = 8;
  private long endTime_;
  /**
   * <pre>
   * The end time (in milliseconds) of the event. , measured between the current time and midnight, January 1, 1970 UTC.
   * This field may be empty if the event has not stopped yet, otherwise it should be a valid timestamp after `startTime`.
   * </pre>
   *
   * <code>int64 endTime = 8;</code>
   * @return The endTime.
   */
  @java.lang.Override
  public long getEndTime() {
    return endTime_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getUuidBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, uuid_);
    }
    if (source_ != null) {
      output.writeMessage(2, getSource());
    }
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, name_);
    }
    if (type_ != org.apache.skywalking.apm.network.event.v3.Type.Normal.getNumber()) {
      output.writeEnum(4, type_);
    }
    if (!getMessageBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, message_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetParameters(),
        ParametersDefaultEntryHolder.defaultEntry,
        6);
    if (startTime_ != 0L) {
      output.writeInt64(7, startTime_);
    }
    if (endTime_ != 0L) {
      output.writeInt64(8, endTime_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getUuidBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, uuid_);
    }
    if (source_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getSource());
    }
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, name_);
    }
    if (type_ != org.apache.skywalking.apm.network.event.v3.Type.Normal.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, type_);
    }
    if (!getMessageBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, message_);
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetParameters().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, java.lang.String>
      parameters__ = ParametersDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, parameters__);
    }
    if (startTime_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(7, startTime_);
    }
    if (endTime_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(8, endTime_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.apache.skywalking.apm.network.event.v3.Event)) {
      return super.equals(obj);
    }
    org.apache.skywalking.apm.network.event.v3.Event other = (org.apache.skywalking.apm.network.event.v3.Event) obj;

    if (!getUuid()
        .equals(other.getUuid())) return false;
    if (hasSource() != other.hasSource()) return false;
    if (hasSource()) {
      if (!getSource()
          .equals(other.getSource())) return false;
    }
    if (!getName()
        .equals(other.getName())) return false;
    if (type_ != other.type_) return false;
    if (!getMessage()
        .equals(other.getMessage())) return false;
    if (!internalGetParameters().equals(
        other.internalGetParameters())) return false;
    if (getStartTime()
        != other.getStartTime()) return false;
    if (getEndTime()
        != other.getEndTime()) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + UUID_FIELD_NUMBER;
    hash = (53 * hash) + getUuid().hashCode();
    if (hasSource()) {
      hash = (37 * hash) + SOURCE_FIELD_NUMBER;
      hash = (53 * hash) + getSource().hashCode();
    }
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + TYPE_FIELD_NUMBER;
    hash = (53 * hash) + type_;
    hash = (37 * hash) + MESSAGE_FIELD_NUMBER;
    hash = (53 * hash) + getMessage().hashCode();
    if (!internalGetParameters().getMap().isEmpty()) {
      hash = (37 * hash) + PARAMETERS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetParameters().hashCode();
    }
    hash = (37 * hash) + STARTTIME_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getStartTime());
    hash = (37 * hash) + ENDTIME_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getEndTime());
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.apache.skywalking.apm.network.event.v3.Event parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.skywalking.apm.network.event.v3.Event parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.skywalking.apm.network.event.v3.Event parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.skywalking.apm.network.event.v3.Event parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.skywalking.apm.network.event.v3.Event parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.apache.skywalking.apm.network.event.v3.Event parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.apache.skywalking.apm.network.event.v3.Event parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.skywalking.apm.network.event.v3.Event parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.skywalking.apm.network.event.v3.Event parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.apache.skywalking.apm.network.event.v3.Event parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.apache.skywalking.apm.network.event.v3.Event parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.apache.skywalking.apm.network.event.v3.Event parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.apache.skywalking.apm.network.event.v3.Event prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code skywalking.v3.Event}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:skywalking.v3.Event)
      org.apache.skywalking.apm.network.event.v3.EventOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.apache.skywalking.apm.network.event.v3.EventOuterClass.internal_static_skywalking_v3_Event_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 6:
          return internalGetParameters();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 6:
          return internalGetMutableParameters();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.apache.skywalking.apm.network.event.v3.EventOuterClass.internal_static_skywalking_v3_Event_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.apache.skywalking.apm.network.event.v3.Event.class, org.apache.skywalking.apm.network.event.v3.Event.Builder.class);
    }

    // Construct using org.apache.skywalking.apm.network.event.v3.Event.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      uuid_ = "";

      if (sourceBuilder_ == null) {
        source_ = null;
      } else {
        source_ = null;
        sourceBuilder_ = null;
      }
      name_ = "";

      type_ = 0;

      message_ = "";

      internalGetMutableParameters().clear();
      startTime_ = 0L;

      endTime_ = 0L;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.apache.skywalking.apm.network.event.v3.EventOuterClass.internal_static_skywalking_v3_Event_descriptor;
    }

    @java.lang.Override
    public org.apache.skywalking.apm.network.event.v3.Event getDefaultInstanceForType() {
      return org.apache.skywalking.apm.network.event.v3.Event.getDefaultInstance();
    }

    @java.lang.Override
    public org.apache.skywalking.apm.network.event.v3.Event build() {
      org.apache.skywalking.apm.network.event.v3.Event result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.apache.skywalking.apm.network.event.v3.Event buildPartial() {
      org.apache.skywalking.apm.network.event.v3.Event result = new org.apache.skywalking.apm.network.event.v3.Event(this);
      int from_bitField0_ = bitField0_;
      result.uuid_ = uuid_;
      if (sourceBuilder_ == null) {
        result.source_ = source_;
      } else {
        result.source_ = sourceBuilder_.build();
      }
      result.name_ = name_;
      result.type_ = type_;
      result.message_ = message_;
      result.parameters_ = internalGetParameters();
      result.parameters_.makeImmutable();
      result.startTime_ = startTime_;
      result.endTime_ = endTime_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.apache.skywalking.apm.network.event.v3.Event) {
        return mergeFrom((org.apache.skywalking.apm.network.event.v3.Event)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.apache.skywalking.apm.network.event.v3.Event other) {
      if (other == org.apache.skywalking.apm.network.event.v3.Event.getDefaultInstance()) return this;
      if (!other.getUuid().isEmpty()) {
        uuid_ = other.uuid_;
        onChanged();
      }
      if (other.hasSource()) {
        mergeSource(other.getSource());
      }
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (other.type_ != 0) {
        setTypeValue(other.getTypeValue());
      }
      if (!other.getMessage().isEmpty()) {
        message_ = other.message_;
        onChanged();
      }
      internalGetMutableParameters().mergeFrom(
          other.internalGetParameters());
      if (other.getStartTime() != 0L) {
        setStartTime(other.getStartTime());
      }
      if (other.getEndTime() != 0L) {
        setEndTime(other.getEndTime());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.apache.skywalking.apm.network.event.v3.Event parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.apache.skywalking.apm.network.event.v3.Event) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.lang.Object uuid_ = "";
    /**
     * <pre>
     * Unique ID of the event. Because an event may span a long period of time, the UUID is necessary to associate the
     * start time with the end time of the same event.
     * </pre>
     *
     * <code>string uuid = 1;</code>
     * @return The uuid.
     */
    public java.lang.String getUuid() {
      java.lang.Object ref = uuid_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        uuid_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Unique ID of the event. Because an event may span a long period of time, the UUID is necessary to associate the
     * start time with the end time of the same event.
     * </pre>
     *
     * <code>string uuid = 1;</code>
     * @return The bytes for uuid.
     */
    public com.google.protobuf.ByteString
        getUuidBytes() {
      java.lang.Object ref = uuid_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        uuid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Unique ID of the event. Because an event may span a long period of time, the UUID is necessary to associate the
     * start time with the end time of the same event.
     * </pre>
     *
     * <code>string uuid = 1;</code>
     * @param value The uuid to set.
     * @return This builder for chaining.
     */
    public Builder setUuid(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      uuid_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Unique ID of the event. Because an event may span a long period of time, the UUID is necessary to associate the
     * start time with the end time of the same event.
     * </pre>
     *
     * <code>string uuid = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearUuid() {
      
      uuid_ = getDefaultInstance().getUuid();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Unique ID of the event. Because an event may span a long period of time, the UUID is necessary to associate the
     * start time with the end time of the same event.
     * </pre>
     *
     * <code>string uuid = 1;</code>
     * @param value The bytes for uuid to set.
     * @return This builder for chaining.
     */
    public Builder setUuidBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      uuid_ = value;
      onChanged();
      return this;
    }

    private org.apache.skywalking.apm.network.event.v3.Source source_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.skywalking.apm.network.event.v3.Source, org.apache.skywalking.apm.network.event.v3.Source.Builder, org.apache.skywalking.apm.network.event.v3.SourceOrBuilder> sourceBuilder_;
    /**
     * <pre>
     * The source object that the event occurs on.
     * </pre>
     *
     * <code>.skywalking.v3.Source source = 2;</code>
     * @return Whether the source field is set.
     */
    public boolean hasSource() {
      return sourceBuilder_ != null || source_ != null;
    }
    /**
     * <pre>
     * The source object that the event occurs on.
     * </pre>
     *
     * <code>.skywalking.v3.Source source = 2;</code>
     * @return The source.
     */
    public org.apache.skywalking.apm.network.event.v3.Source getSource() {
      if (sourceBuilder_ == null) {
        return source_ == null ? org.apache.skywalking.apm.network.event.v3.Source.getDefaultInstance() : source_;
      } else {
        return sourceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The source object that the event occurs on.
     * </pre>
     *
     * <code>.skywalking.v3.Source source = 2;</code>
     */
    public Builder setSource(org.apache.skywalking.apm.network.event.v3.Source value) {
      if (sourceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        source_ = value;
        onChanged();
      } else {
        sourceBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * The source object that the event occurs on.
     * </pre>
     *
     * <code>.skywalking.v3.Source source = 2;</code>
     */
    public Builder setSource(
        org.apache.skywalking.apm.network.event.v3.Source.Builder builderForValue) {
      if (sourceBuilder_ == null) {
        source_ = builderForValue.build();
        onChanged();
      } else {
        sourceBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * The source object that the event occurs on.
     * </pre>
     *
     * <code>.skywalking.v3.Source source = 2;</code>
     */
    public Builder mergeSource(org.apache.skywalking.apm.network.event.v3.Source value) {
      if (sourceBuilder_ == null) {
        if (source_ != null) {
          source_ =
            org.apache.skywalking.apm.network.event.v3.Source.newBuilder(source_).mergeFrom(value).buildPartial();
        } else {
          source_ = value;
        }
        onChanged();
      } else {
        sourceBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * The source object that the event occurs on.
     * </pre>
     *
     * <code>.skywalking.v3.Source source = 2;</code>
     */
    public Builder clearSource() {
      if (sourceBuilder_ == null) {
        source_ = null;
        onChanged();
      } else {
        source_ = null;
        sourceBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * The source object that the event occurs on.
     * </pre>
     *
     * <code>.skywalking.v3.Source source = 2;</code>
     */
    public org.apache.skywalking.apm.network.event.v3.Source.Builder getSourceBuilder() {
      
      onChanged();
      return getSourceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The source object that the event occurs on.
     * </pre>
     *
     * <code>.skywalking.v3.Source source = 2;</code>
     */
    public org.apache.skywalking.apm.network.event.v3.SourceOrBuilder getSourceOrBuilder() {
      if (sourceBuilder_ != null) {
        return sourceBuilder_.getMessageOrBuilder();
      } else {
        return source_ == null ?
            org.apache.skywalking.apm.network.event.v3.Source.getDefaultInstance() : source_;
      }
    }
    /**
     * <pre>
     * The source object that the event occurs on.
     * </pre>
     *
     * <code>.skywalking.v3.Source source = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.apache.skywalking.apm.network.event.v3.Source, org.apache.skywalking.apm.network.event.v3.Source.Builder, org.apache.skywalking.apm.network.event.v3.SourceOrBuilder> 
        getSourceFieldBuilder() {
      if (sourceBuilder_ == null) {
        sourceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.apache.skywalking.apm.network.event.v3.Source, org.apache.skywalking.apm.network.event.v3.Source.Builder, org.apache.skywalking.apm.network.event.v3.SourceOrBuilder>(
                getSource(),
                getParentForChildren(),
                isClean());
        source_ = null;
      }
      return sourceBuilder_;
    }

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * The name of the event. For example, `Reboot`, `Upgrade` etc.
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The name.
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The name of the event. For example, `Reboot`, `Upgrade` etc.
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The bytes for name.
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The name of the event. For example, `Reboot`, `Upgrade` etc.
     * </pre>
     *
     * <code>string name = 3;</code>
     * @param value The name to set.
     * @return This builder for chaining.
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the event. For example, `Reboot`, `Upgrade` etc.
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The name of the event. For example, `Reboot`, `Upgrade` etc.
     * </pre>
     *
     * <code>string name = 3;</code>
     * @param value The bytes for name to set.
     * @return This builder for chaining.
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private int type_ = 0;
    /**
     * <pre>
     * The type of the event. This field is friendly for UI visualization, where events of type `Normal` are considered as normal operations,
     * while `Error` is considered as unexpected operations, such as `Crash` events, therefore we can mark them with different colors to be easier identified.
     * </pre>
     *
     * <code>.skywalking.v3.Type type = 4;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * The type of the event. This field is friendly for UI visualization, where events of type `Normal` are considered as normal operations,
     * while `Error` is considered as unexpected operations, such as `Crash` events, therefore we can mark them with different colors to be easier identified.
     * </pre>
     *
     * <code>.skywalking.v3.Type type = 4;</code>
     * @param value The enum numeric value on the wire for type to set.
     * @return This builder for chaining.
     */
    public Builder setTypeValue(int value) {
      
      type_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The type of the event. This field is friendly for UI visualization, where events of type `Normal` are considered as normal operations,
     * while `Error` is considered as unexpected operations, such as `Crash` events, therefore we can mark them with different colors to be easier identified.
     * </pre>
     *
     * <code>.skywalking.v3.Type type = 4;</code>
     * @return The type.
     */
    @java.lang.Override
    public org.apache.skywalking.apm.network.event.v3.Type getType() {
      @SuppressWarnings("deprecation")
      org.apache.skywalking.apm.network.event.v3.Type result = org.apache.skywalking.apm.network.event.v3.Type.valueOf(type_);
      return result == null ? org.apache.skywalking.apm.network.event.v3.Type.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The type of the event. This field is friendly for UI visualization, where events of type `Normal` are considered as normal operations,
     * while `Error` is considered as unexpected operations, such as `Crash` events, therefore we can mark them with different colors to be easier identified.
     * </pre>
     *
     * <code>.skywalking.v3.Type type = 4;</code>
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setType(org.apache.skywalking.apm.network.event.v3.Type value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The type of the event. This field is friendly for UI visualization, where events of type `Normal` are considered as normal operations,
     * while `Error` is considered as unexpected operations, such as `Crash` events, therefore we can mark them with different colors to be easier identified.
     * </pre>
     *
     * <code>.skywalking.v3.Type type = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearType() {
      
      type_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object message_ = "";
    /**
     * <pre>
     * The detail of the event that describes why this event happened. This should be a one-line message that briefly describes why the event is reported.
     * Examples of an `Upgrade` event may be something like `Upgrade from ${from_version} to ${to_version}`.
     * It's NOT encouraged to include the detailed logs of this event, such as the exception stack trace.
     * </pre>
     *
     * <code>string message = 5;</code>
     * @return The message.
     */
    public java.lang.String getMessage() {
      java.lang.Object ref = message_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        message_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * The detail of the event that describes why this event happened. This should be a one-line message that briefly describes why the event is reported.
     * Examples of an `Upgrade` event may be something like `Upgrade from ${from_version} to ${to_version}`.
     * It's NOT encouraged to include the detailed logs of this event, such as the exception stack trace.
     * </pre>
     *
     * <code>string message = 5;</code>
     * @return The bytes for message.
     */
    public com.google.protobuf.ByteString
        getMessageBytes() {
      java.lang.Object ref = message_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        message_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * The detail of the event that describes why this event happened. This should be a one-line message that briefly describes why the event is reported.
     * Examples of an `Upgrade` event may be something like `Upgrade from ${from_version} to ${to_version}`.
     * It's NOT encouraged to include the detailed logs of this event, such as the exception stack trace.
     * </pre>
     *
     * <code>string message = 5;</code>
     * @param value The message to set.
     * @return This builder for chaining.
     */
    public Builder setMessage(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      message_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The detail of the event that describes why this event happened. This should be a one-line message that briefly describes why the event is reported.
     * Examples of an `Upgrade` event may be something like `Upgrade from ${from_version} to ${to_version}`.
     * It's NOT encouraged to include the detailed logs of this event, such as the exception stack trace.
     * </pre>
     *
     * <code>string message = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearMessage() {
      
      message_ = getDefaultInstance().getMessage();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The detail of the event that describes why this event happened. This should be a one-line message that briefly describes why the event is reported.
     * Examples of an `Upgrade` event may be something like `Upgrade from ${from_version} to ${to_version}`.
     * It's NOT encouraged to include the detailed logs of this event, such as the exception stack trace.
     * </pre>
     *
     * <code>string message = 5;</code>
     * @param value The bytes for message to set.
     * @return This builder for chaining.
     */
    public Builder setMessageBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      message_ = value;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, java.lang.String> parameters_;
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetParameters() {
      if (parameters_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ParametersDefaultEntryHolder.defaultEntry);
      }
      return parameters_;
    }
    private com.google.protobuf.MapField<java.lang.String, java.lang.String>
    internalGetMutableParameters() {
      onChanged();;
      if (parameters_ == null) {
        parameters_ = com.google.protobuf.MapField.newMapField(
            ParametersDefaultEntryHolder.defaultEntry);
      }
      if (!parameters_.isMutable()) {
        parameters_ = parameters_.copy();
      }
      return parameters_;
    }

    public int getParametersCount() {
      return internalGetParameters().getMap().size();
    }
    /**
     * <pre>
     * The parameters in the `message` field.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 6;</code>
     */

    @java.lang.Override
    public boolean containsParameters(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetParameters().getMap().containsKey(key);
    }
    /**
     * Use {@link #getParametersMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getParameters() {
      return getParametersMap();
    }
    /**
     * <pre>
     * The parameters in the `message` field.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 6;</code>
     */
    @java.lang.Override

    public java.util.Map<java.lang.String, java.lang.String> getParametersMap() {
      return internalGetParameters().getMap();
    }
    /**
     * <pre>
     * The parameters in the `message` field.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 6;</code>
     */
    @java.lang.Override

    public java.lang.String getParametersOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetParameters().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * The parameters in the `message` field.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 6;</code>
     */
    @java.lang.Override

    public java.lang.String getParametersOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetParameters().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearParameters() {
      internalGetMutableParameters().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * The parameters in the `message` field.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 6;</code>
     */

    public Builder removeParameters(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableParameters().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String>
    getMutableParameters() {
      return internalGetMutableParameters().getMutableMap();
    }
    /**
     * <pre>
     * The parameters in the `message` field.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 6;</code>
     */
    public Builder putParameters(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableParameters().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * The parameters in the `message` field.
     * </pre>
     *
     * <code>map&lt;string, string&gt; parameters = 6;</code>
     */

    public Builder putAllParameters(
        java.util.Map<java.lang.String, java.lang.String> values) {
      internalGetMutableParameters().getMutableMap()
          .putAll(values);
      return this;
    }

    private long startTime_ ;
    /**
     * <pre>
     * The start time (in milliseconds) of the event, measured between the current time and midnight, January 1, 1970 UTC.
     * This field is mandatory when an event occurs.
     * </pre>
     *
     * <code>int64 startTime = 7;</code>
     * @return The startTime.
     */
    @java.lang.Override
    public long getStartTime() {
      return startTime_;
    }
    /**
     * <pre>
     * The start time (in milliseconds) of the event, measured between the current time and midnight, January 1, 1970 UTC.
     * This field is mandatory when an event occurs.
     * </pre>
     *
     * <code>int64 startTime = 7;</code>
     * @param value The startTime to set.
     * @return This builder for chaining.
     */
    public Builder setStartTime(long value) {
      
      startTime_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The start time (in milliseconds) of the event, measured between the current time and midnight, January 1, 1970 UTC.
     * This field is mandatory when an event occurs.
     * </pre>
     *
     * <code>int64 startTime = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearStartTime() {
      
      startTime_ = 0L;
      onChanged();
      return this;
    }

    private long endTime_ ;
    /**
     * <pre>
     * The end time (in milliseconds) of the event. , measured between the current time and midnight, January 1, 1970 UTC.
     * This field may be empty if the event has not stopped yet, otherwise it should be a valid timestamp after `startTime`.
     * </pre>
     *
     * <code>int64 endTime = 8;</code>
     * @return The endTime.
     */
    @java.lang.Override
    public long getEndTime() {
      return endTime_;
    }
    /**
     * <pre>
     * The end time (in milliseconds) of the event. , measured between the current time and midnight, January 1, 1970 UTC.
     * This field may be empty if the event has not stopped yet, otherwise it should be a valid timestamp after `startTime`.
     * </pre>
     *
     * <code>int64 endTime = 8;</code>
     * @param value The endTime to set.
     * @return This builder for chaining.
     */
    public Builder setEndTime(long value) {
      
      endTime_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The end time (in milliseconds) of the event. , measured between the current time and midnight, January 1, 1970 UTC.
     * This field may be empty if the event has not stopped yet, otherwise it should be a valid timestamp after `startTime`.
     * </pre>
     *
     * <code>int64 endTime = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearEndTime() {
      
      endTime_ = 0L;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:skywalking.v3.Event)
  }

  // @@protoc_insertion_point(class_scope:skywalking.v3.Event)
  private static final org.apache.skywalking.apm.network.event.v3.Event DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.apache.skywalking.apm.network.event.v3.Event();
  }

  public static org.apache.skywalking.apm.network.event.v3.Event getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Event>
      PARSER = new com.google.protobuf.AbstractParser<Event>() {
    @java.lang.Override
    public Event parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Event(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Event> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Event> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.apache.skywalking.apm.network.event.v3.Event getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

